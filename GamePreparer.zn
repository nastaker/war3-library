library GamePreparer requires TimerUtils, SystemWorkpoint {

  integer DiffCount = 4;
  integer RaceCount = 4;

  dialog raceDialog;
  dialog diffDialog;
  button raceButtons[];
  button diffButtons[];
  boolean isPlayerSelected[];
  integer diffSelectedCount[];
  integer diffSelectedNumer = 0;

  timer diffTimer;
  boolean IsDiffSelected = false;
  timerdialog diffTimerDialog;

  function InitVars() {
    diffTimer = NewTimer();
    diffTimerDialog = CreateTimerDialog(diffTimer);
    diffDialog = DialogCreate();
    raceDialog = DialogCreate();
    raceButtons[0] = DialogAddButton(raceDialog, "人类[Human]", 'H');
    raceButtons[1] = DialogAddButton(raceDialog, "兽人[Orc]", 'O');
    raceButtons[2] = DialogAddButton(raceDialog, "亡灵[Undead]", 'U');
    raceButtons[3] = DialogAddButton(raceDialog, "暗夜精灵[NightElf]", 'E');
    diffButtons[0] = DialogAddButton(diffDialog, "普通[Normal]", 'N');
    diffButtons[1] = DialogAddButton(diffDialog, "困难[Hard]", 'H');
    diffButtons[2] = DialogAddButton(diffDialog, "专家[Professional]", 'P');
    diffButtons[3] = DialogAddButton(diffDialog, "史诗[Epic]", 'E');
  }

  public function InitQuests() {
    QuestMessageBJ(udg_PlayerForce, bj_QUESTMESSAGE_DISCOVERED, "总指挥部来电：请先部署防御工事，先稳住阵地后再做其他打算。\n|cFFFFCC00请按F9查看工分系统的说明。|r");
    CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "工分系统", "每波开始时会发放工分，工分可用于升级单位或兑换资源。|n输入-ej兑换金币，输入-em兑换木材。每点工分可兑换400指定资源。|n例：输入-ej10，使用10工分兑换4000金币，输入-em3，使用3工分兑换1200木材。", "ReplaceableTextures\\CommandButtons\\BTNHeroTinker.blp");
    CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "购买属性", "输入-ll -mj -zl为当前选中的英雄购买属性，每点属性500金币。|n例：输入-ll50购买50点力量，输入-mj20购买20点敏捷。|n输入-dj购买等级，每级1500金币。|n例：输入-dj5购买5等级。", "ReplaceableTextures\\PassiveButtons\\PASBTNStatUp.blp");
    CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "Special Thanks", "SpiritArrow by epsilon|nCosmic Elven Wings by Mythic|nArchangel Wing by FeelsGoodMan", "ReplaceableTextures\\CommandButtons\\BTNWispSplode.blp");
    CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "调整视角", "1、输入++、--微调视角高度|n2、输入-cam[视角高度]来设置视角高度，如：“-cam2500”调整视角高度为2500。视角高度范围2000-4000", "ReplaceableTextures\\CommandButtons\\BTNControlMagic.blp");
    CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "剿匪", "附近山林中有土匪把守，剿灭他们可以获得更多资源。", "ReplaceableTextures\\CommandButtons\\BTNBanditSpearThrower.blp");
    CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "关于", "作者：Seviethgin|n优化：Nastaker|n邮箱：nastaker@163.com", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
  }

  public function JudgeDifficulty() {
    trigger trg = CreateTrigger();
    integer i;
    for (1 <= i < DiffCount) {
      if (diffSelectedCount[0] < diffSelectedCount[i]) {
        diffSelectedCount[0] = diffSelectedCount[i];
        udg_CurrDiff = i;
      }
    }
    TriggerRegisterUnitEvent(trg, CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'n01A', 300, -3800, 135), EVENT_UNIT_SELL);
    TriggerRegisterUnitEvent(trg, CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'nbks', -4096, -1792, 135), EVENT_UNIT_SELL);
    TriggerRegisterUnitEvent(trg, CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'nbks', 4096, -1792, 135), EVENT_UNIT_SELL);
    TriggerAddAction(trg, function SellUnit);
    DisplayTimedTextToForce(udg_PlayerForce, 90.00, "已选择难度：" + udg_DiffStr[udg_CurrDiff]);
    trg = null;
  }

  // 种族选择对话框被点击
  function RaceDialogEvent() {
    SetPlayerStateBJ(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_FOOD_CAP, 100);
    if (GetClickedButton() == raceButtons[0]) {
      MeleeStartingUnitsForPlayer(RACE_HUMAN, GetTriggerPlayer(), udg_Loc[(20 + GetPlayerId(GetTriggerPlayer()))], true);
    } else if (GetClickedButton() == raceButtons[1]) {
      MeleeStartingUnitsForPlayer(RACE_ORC, GetTriggerPlayer(), udg_Loc[(20 + GetPlayerId(GetTriggerPlayer()))], true);
    } else if (GetClickedButton() == raceButtons[2]) {
      MeleeStartingUnitsForPlayer(RACE_UNDEAD, GetTriggerPlayer(), udg_Loc[(20 + GetPlayerId(GetTriggerPlayer()))], true);
    } else if (GetClickedButton() == raceButtons[3]) {
      MeleeStartingUnitsForPlayer(RACE_NIGHTELF, GetTriggerPlayer(), udg_Loc[(20 + GetPlayerId(GetTriggerPlayer()))], true);
    }
    MultiboardShowPersonal();
  }

  function DiffTimerDialogClose() {
    DialogDisplay(GetEnumPlayer(), diffDialog, false);
    // 判断此玩家是否选择了种族
    if (!isPlayerSelected[GetPlayerId(GetEnumPlayer())]) {
      DialogSetMessage(raceDialog, "请选择种族");
      DialogDisplay(GetEnumPlayer(), raceDialog, true);
    }
  }

  // 难度选择对话框被点击
  function DiffDialogEvent() {
    integer i;
    diffSelectedNumer = diffSelectedNumer + 1;
    DialogSetMessage(raceDialog, "请选择种族");
    DialogDisplay(GetTriggerPlayer(), raceDialog, true);
    isPlayerSelected[GetPlayerId(GetTriggerPlayer())] = true;
    for (0 <= i < DiffCount) {
      if (GetClickedButton() == diffButtons[i]) {
        diffSelectedCount[i] = diffSelectedCount[i] + 1;
      }
    }
    if (IsDiffSelected || diffSelectedNumer < CountPlayersInForceBJ(udg_PlayerForce)) {
      return;
    }
    IsDiffSelected = true;
    // 所有人都已选择难度
    // 暂停计时器
    PauseTimer(diffTimer);
    // 隐藏计时器窗口
    TimerDialogDisplay(diffTimerDialog, false);
    // 判断选择的难度
    TriggerExecute(gg_trg_GameStart);
  }

  function DiffTimerTicked() {
    // 暂停计时器
    PauseTimer(diffTimer);
    // 隐藏计时器窗口
    TimerDialogDisplay(diffTimerDialog, false);
    // 如果所有人都选择了难度，此计时器不做任何动作
    if (IsDiffSelected) {
      return;
    }
    IsDiffSelected = true;
    // 关闭所有人难度选择对话框，并让其中没有选择种族的玩家选择种族
    ForForce(udg_PlayerForce, function DiffTimerDialogClose);
    // 判断选择的难度
    TriggerExecute(gg_trg_GameStart);
  }

  function RegisterPlayerThings() {
    SetPlayerTechMaxAllowedSwap('Nsir', 1, GetEnumPlayer());
    SetPlayerTechMaxAllowedSwap('Hvwd', 1, GetEnumPlayer());
    TriggerRegisterPlayerUnitEventSimple(gg_trg_Warpten, GetEnumPlayer(), EVENT_PLAYER_UNIT_CONSTRUCT_START);
    TriggerRegisterPlayerUnitEventSimple(gg_trg_Warpten, GetEnumPlayer(), EVENT_PLAYER_UNIT_UPGRADE_START);
    DialogDisplay(GetEnumPlayer(), diffDialog, true);
  }

  function init() {
    // 设置视角高度
    SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 2500.0, 1);
    // 打开电影模式
    CinematicModeBJ(true, GetPlayersAll());
    // 淡入
    CinematicFadeBJ(bj_CINEFADETYPE_FADEIN, 2.00, "ReplaceableTextures\\CameraMasks\\HazeFilter_mask.blp", 0, 0, 0, 0);
    // 发送提示
    TransmissionFromUnitWithNameBJ(GetPlayersAll(), null, "作者", null, "请稍等，游戏加载中……", bj_TIMETYPE_SET, 1.00, true);
    // 关闭电影模式
    CinematicModeBJ(false, GetPlayersAll());
    // 启用难度选择计时器
    TimerStart(diffTimer, 10.00, false, function DiffTimerTicked);
    TimerDialogSetTitle(diffTimerDialog, "难度选择倒计时");
    TimerDialogDisplay(diffTimerDialog, true);
    DialogSetMessage(diffDialog, "请选择难度");
    ForForce(udg_PlayerForce, function RegisterPlayerThings);
  }

  function onInit() {
    trigger trig = CreateTrigger();
    trigger trigDiffDialog = CreateTrigger();
    trigger trigRaceDialog = CreateTrigger();
    // 初始化对话框、计时器等变量
    InitVars();
    // 游戏开始〇秒后触发
    TriggerRegisterTimerEvent(trig, 0.00, false);
    TriggerAddAction(trig, function init);
    // 难度选择对话框被点击事件;
    TriggerRegisterDialogEvent(trigDiffDialog, diffDialog);
    TriggerAddAction(trigDiffDialog, function DiffDialogEvent);
    // 种族选择对话框被点击事件;
    TriggerRegisterDialogEvent(trigRaceDialog, raceDialog);
    TriggerAddAction(trigRaceDialog, function RaceDialogEvent);
  }
}