library GlobalVar {

  public {
    constant string qqgroup = "39055594";
    constant string author = "Nastaker";
    constant string date = "2023/09/03";
    constant string ver = "1.292";
    constant real MIN_BOUND_X = -9700;
    constant real MIN_BOUND_Y = -9700;
    constant real MAX_BOUND_X = 9700;
    constant real MAX_BOUND_Y = 9700;

    string ROUND_SETTING = "150,70,80,1,8,2,0.5,28,5,5,5,5,17440,0,500,1,1.00,0.10;120,50,60,1,8,3,0.5,28,10,10,6,10,17440,25,500,0.85,0.80,0.075;100,40,50,1,8,4,0.5,28,15,15,7,15,43296,75,500,0.7,0.70,0.05;80,40,40,0,8,5,0.5,28,20,20,9,20,43296,100,500,0.5,0.50,0.03;";
    string ENEMY_SETTING = "0.5,5,1.01,10,5,1.01,220,50,1.01,1.2,0,0,0.3;1,5,1.02,15,5,1.02,220,50,1.02,1.3,0,0,0.4;1.5,5,1.03,20,5,1.03,220,50,1.03,1.4,0,0,0.5;2,5,1.05,30,5,1.05,220,50,1.04,1.5,0,0,1;";

    real UNIT_UPGRADE_BASE = 0.50;
    real UNIT_UPGRADE_RATIO = 0.06;
    real UNIT_UPGRADE_POWER = 1.5;
    integer WORKPOINT_SUPPLY = 5;
    integer MAX_UPGRADE_WORKPOINT = 20;
    integer GAP_PER_LEVEL = 5;
    integer WORKPOINT_UPGRADE_PRICE = 1000;
    integer LEVEL_PRICE = 1500;
    real GENERAL_INCREASE_RATIO = 0.15;
    real UltimateDamageRatio = 1.0;
    integer ISSUE_SOURCE_AMOUNT = 4000;
    integer MAX_KILL_COUNT = 99999999;
    integer MAX_KILL_COUNT_GAME = 5000;
    integer CONSUMPTION_TO_GET_WING = 300;

    string PlayerTitleStr[];
    string GeneralTitleStr[];
    integer GeneralUpgradeNeedKills[];
    integer WINGIDS[];

    integer ATK_UPGRADE_RATIO[];
    integer DEF_UPGRADE_RATIO[];
    integer ATKSPD_UPGRADE_RATIO[];
    integer LIFE_UPGRADE_RATIO[];

    integer MaxJF = 305;

    gamecache ctable = InitGameCache("11.s");

    function YDWERPGGetMapConfig(string ckey) -> string {
      return GetStoredString(ctable,"config",ckey);
    }

    function GetPlatConfig() {
      string tmp = "";
      if (ver != YDWERPGGetMapConfig("VERSION")) {
        return;
      }
      tmp = YDWERPGGetMapConfig("ROUND_SETTING");
      if (tmp != null && tmp != "") {
        ROUND_SETTING = tmp;
      }
      tmp = YDWERPGGetMapConfig("ENEMY_SETTING");
      if (tmp != null && tmp != "") {
        ENEMY_SETTING = tmp;
      }
      tmp = YDWERPGGetMapConfig("WORKPOINT_PRICE");
      if (tmp != null && tmp != "") {
        udg_CFG_WORKPOINT_PRICE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("ATTR_PRICE");
      if (tmp != null && tmp != "") {
        udg_CFG_ATTR_PRICE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("BOOK_ENABLE");
      if (tmp != null && tmp != "") {
        udg_CFG_BOOK_ENABLE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("EXCHANGE_ENABLE");
      if (tmp != null && tmp != "") {
        udg_CFG_EXCHANGE_ENABLE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("WORKPOINT_SUPPLY");
      if (tmp != null && tmp != "") {
        WORKPOINT_SUPPLY = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("MAX_UPGRADE_WORKPOINT");
      if (tmp != null && tmp != "") {
        udg_CFG_WORKPOINT_PRICE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("WORKPOINT_UPGRADE_PRICE");
      if (tmp != null && tmp != "") {
        WORKPOINT_UPGRADE_PRICE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("LEVEL_PRICE");
      if (tmp != null && tmp != "") {
        LEVEL_PRICE = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("GENERAL_INCREASE_RATIO");
      if (tmp != null && tmp != "") {
        GENERAL_INCREASE_RATIO = S2R(tmp);
      }
      tmp = YDWERPGGetMapConfig("CONSUMPTION_TO_GET_WING");
      if (tmp != null && tmp != "") {
        CONSUMPTION_TO_GET_WING = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("GAP_PER_LEVEL");
      if (tmp != null && tmp != "") {
        GAP_PER_LEVEL = S2I(tmp);
      }
      tmp = YDWERPGGetMapConfig("UNIT_UPGRADE_BASE");
      if (tmp != null && tmp != "") {
        UNIT_UPGRADE_BASE = S2R(tmp);
      }
      tmp = YDWERPGGetMapConfig("UNIT_UPGRADE_RATIO");
      if (tmp != null && tmp != "") {
        UNIT_UPGRADE_RATIO = S2R(tmp);
      }
      tmp = YDWERPGGetMapConfig("UNIT_UPGRADE_POWER");
      if (tmp != null && tmp != "") {
        UNIT_UPGRADE_POWER = S2R(tmp);
      }
    }
  }

  function LoadRoundSettings() {
    integer i, typeIndex = 0, startIndex = 0, diffIndex = 0;
    integer len = 0;
    string valueStr, char;
    for (0 <= i < StringLength(ROUND_SETTING)) {
      char = SubString(ROUND_SETTING, i, i+1);
      if (diffIndex == udg_CurrDiff && (char == "," || char == ";")) {
        // 读取当前难度的配置
        valueStr = SubString(ROUND_SETTING, startIndex, len);
        if (typeIndex == 0) {
          // 准备时间：
          udg_FirstAttackTime = S2R(valueStr);
        } else if (typeIndex == 1) {
          // 进攻间隔：
          udg_AttackTime = S2R(valueStr);
        } else if (typeIndex == 2) {
          // 最大间隔：
          udg_MaxAttackTime = S2R(valueStr);
        } else if (typeIndex == 3) {
          // 增加间隔：
          udg_AttackTimeAdd = S2R(valueStr);
        } else if (typeIndex == 4) {
          // 刷怪间隔：
          udg_SpawnTimeSpan = S2R(valueStr);
        } else if (typeIndex == 5) {
          // 每轮波数：
          udg_WaveCount = S2I(valueStr);
        } else if (typeIndex == 6) {
          // 波数间隔系数：
          udg_AttackTimeRatio = S2R(valueStr);
        } else if (typeIndex == 7) {
          // 刷怪方式：
          udg_SpawnColumn = 4;
          udg_SpawnRow = S2I(valueStr) / udg_SpawnColumn;
        } else if (typeIndex == 8) {
          // 精英怪比例(1-100随机，小于等于此值为精英)：
          udg_EliteRatio = S2I(valueStr);
        } else if (typeIndex == 9) {
          // 精英怪每轮最高数量：
          udg_EliteMaxCount = S2I(valueStr);
        } else if (typeIndex == 10) {
          // 偷袭波数：
          udg_StrikeWaveCount = S2I(valueStr);
        } else if (typeIndex == 11) {
          // 偷袭刷怪间隔：
          udg_StrikeTimeSpan = S2R(valueStr);
        } else if (typeIndex == 12) {
          // 偷袭于哪几轮(2进制存储方式，用haveBinary检查)：
          udg_StrikeWaveBinary = S2I(valueStr);
        } else if (typeIndex == 13) {
          // 偷袭隐形概率(1-100随机，小于等于此值时隐形)：
          udg_StrikeInvProb = S2I(valueStr);
        } else if (typeIndex == 14) {
          // 最大敌人数量
          udg_MaxEnemyCount = S2I(valueStr);
        } else if (typeIndex == 15) {
          // 大招输出比例
          UltimateDamageRatio = S2R(valueStr);
        } else if (typeIndex == 16) {
          // 基础经验值比例
          udg_CFG_EXP_RATIO = S2R(valueStr);
        } else if (typeIndex == 17) {
          // 英雄经验值奖励
          udg_CFG_EXP_RATIO_BONUS = S2R(valueStr);
        }
        startIndex = i+1;
        typeIndex = typeIndex + 1;
      }

      if (char == ";") {
        if (typeIndex > 0) {
          // 已经读取，直接退出
          return;
        }
        // 开启下一个难度的读取
        diffIndex = diffIndex + 1;
        startIndex = i+1;
        typeIndex = 0;
      }
      len = len + 1;
    }
  }

  

  function LoadEnemySettings() {
    integer i, typeIndex = 0, startIndex = 0, diffIndex = 0;
    integer len = 0;
    string valueStr, char;
    for (0 <= i < StringLength(ENEMY_SETTING)) {
      char = SubString(ENEMY_SETTING, i, i+1);
      if (diffIndex == udg_CurrDiff && (char == "," || char == ";")) {
        // 读取当前难度的配置
        valueStr = SubString(ENEMY_SETTING, startIndex, len);
        if (typeIndex == 0) {
          // 攻击加成系数：
          udg_EnemyAttackRatio = S2R(valueStr);
        } else if (typeIndex == 1) {
          // 攻击力：
          udg_EnemyAttack = S2I(valueStr);
        } else if (typeIndex == 2) {
          // 攻击成长系数：
          udg_EnemyAttackGrowRatio = S2R(valueStr);
        } else if (typeIndex == 3) {
          // 基础防御力：
          udg_EnemyDefBase = S2I(valueStr);
        } else if (typeIndex == 4) {
          // 防御力：
          udg_EnemyDef = S2I(valueStr);
        } else if (typeIndex == 5) {
          // 防御成长系数：
          udg_EnemyDefGrowRatio = S2R(valueStr);
        } else if (typeIndex == 6) {
          // 基础生命值：
          udg_EnemyHPBase = S2I(valueStr);
        } else if (typeIndex == 7) {
          // 生命值：
          udg_EnemyHP = S2I(valueStr);
        } else if (typeIndex == 8) {
          // 生命成长系数：
          udg_EnemyHPGrowRatio = S2R(valueStr);
        } else if (typeIndex == 9) {
          // 精英怪强化系数
          udg_EliteStrengthenRatio = S2R(valueStr);
        } else if (typeIndex == 10) {
          // BOSS额外生命值
          udg_LeaderHPExtra = S2I(valueStr);
        } else if (typeIndex == 11) {
          // BOSS生命值成长系数
          udg_LeaderHPGrowRatio = S2R(valueStr);
        } else if (typeIndex == 12) {
          // 敌人飞行单位加成系数
          udg_EnemyFlyingAttrRatio = S2R(valueStr);
        }
        startIndex = i+1;
        typeIndex = typeIndex + 1;
      }

      if (char == ";") {
        if (typeIndex > 0) {
          // 已经读取，直接退出
          return;
        }
        // 开启下一个难度的读取
        diffIndex = diffIndex + 1;
        startIndex = i+1;
        typeIndex = 0;
      }
      len = len + 1;
    }
  }
  

  public function LoadSettings() {
    LoadRoundSettings();
    LoadEnemySettings();
  }

  function InitUnitUpgradeRatio() {
    ATK_UPGRADE_RATIO[0] = 5; // 攻击力近战
    ATK_UPGRADE_RATIO[1] = 3; // 攻击力远程
    ATK_UPGRADE_RATIO[2] = 2; // 攻击力近战召唤
    ATK_UPGRADE_RATIO[3] = 2; // 攻击力远程召唤
    DEF_UPGRADE_RATIO[0] = 5; // 防御力近战
    DEF_UPGRADE_RATIO[1] = 3; // 防御力远程
    DEF_UPGRADE_RATIO[2] = 2; // 防御力近战召唤
    DEF_UPGRADE_RATIO[3] = 2; // 防御力远程召唤
    ATKSPD_UPGRADE_RATIO[0] = 5; // 攻速近战
    ATKSPD_UPGRADE_RATIO[1] = 3; // 攻速远程
    ATKSPD_UPGRADE_RATIO[2] = 2; // 攻速近战召唤
    ATKSPD_UPGRADE_RATIO[3] = 2; // 攻速远程召唤
    LIFE_UPGRADE_RATIO[0] = 50; // 生命值近战
    LIFE_UPGRADE_RATIO[1] = 35; // 生命值远程
    LIFE_UPGRADE_RATIO[2] = 25; // 生命值近战召唤
    LIFE_UPGRADE_RATIO[3] = 25; // 生命值远程召唤
  }

  function InitWingIds() {
    WINGIDS[0] = 'A00M';
    WINGIDS[1] = 'A00N';
    WINGIDS[2] = 'A00O';
    WINGIDS[3] = 'A00P';
    WINGIDS[4] = 'A00Q';
    WINGIDS[5] = 'A02H';
    WINGIDS[6] = 'A02N';
  }

  function InitPlayerTitleStr() {
    PlayerTitleStr[0] = "无";
    PlayerTitleStr[1] = "|cffffcc00元老玩家|r";
    PlayerTitleStr[2] = "|cffff3333一骑当千|r";
    PlayerTitleStr[3] = "|cffffcc00天下无双|r";
    PlayerTitleStr[4] = "|cffff1111迎难而上|r";
    PlayerTitleStr[5] = "|cbbffff00威震寰宇|r";
    PlayerTitleStr[6] = "|cffffcc00战无不胜|r";
    PlayerTitleStr[7] = "|cff39C5BB测试员|r";
    PlayerTitleStr[8] = "|cffff9900建筑师|r";
    PlayerTitleStr[9] = "|cffff3333将军|r";
  }

  function InitGeneralTitleStr() {
    GeneralTitleStr[0] = "无";
    GeneralTitleStr[1] = "|cffDE7062游骑将军|r";
    GeneralTitleStr[2] = "|cffE08058宁远将军|r";
    GeneralTitleStr[3] = "|cffE18853定远将军|r";
    GeneralTitleStr[4] = "|cffE2904E明威将军|r";
    GeneralTitleStr[5] = "|cffE39849宣威将军|r";
    GeneralTitleStr[6] = "|cffaa20a3壮武将军|r";
    GeneralTitleStr[7] = "|cffb72dc4忠武将军|r";
    GeneralTitleStr[8] = "|cffcc2ecc归德将军|r";
    GeneralTitleStr[9] = "|cffba10c0云麾将军|r";
    GeneralTitleStr[10] = "|cffad19bb怀化将军|r";
    GeneralTitleStr[11] = "|cff952eaa冠军大将军|r";
    GeneralTitleStr[12] = "|cffbe25c4镇军大将军|r";
    GeneralTitleStr[13] = "|cffa126c0辅国大将军|r";
    GeneralTitleStr[14] = "|cffa120b3骠骑大将军|r";
    GeneralTitleStr[15] = "|cff7814bb车骑将军|r";
    GeneralTitleStr[16] = "|cffeeee00卫将军|r";
    GeneralTitleStr[17] = "|cffffff00镇将军|r";
    GeneralTitleStr[18] = "|cffffff00镇将军|r";

    GeneralUpgradeNeedKills[0] = 0;
    GeneralUpgradeNeedKills[1] = 100;
    GeneralUpgradeNeedKills[2] = 200;
    GeneralUpgradeNeedKills[3] = 300;
    GeneralUpgradeNeedKills[4] = 500;
    GeneralUpgradeNeedKills[5] = 800;
    GeneralUpgradeNeedKills[6] = 1300;
    GeneralUpgradeNeedKills[7] = 2100;
    GeneralUpgradeNeedKills[8] = 3400;
    GeneralUpgradeNeedKills[9] = 5500;
    GeneralUpgradeNeedKills[10] = 8900;
    GeneralUpgradeNeedKills[11] = 14400;
    GeneralUpgradeNeedKills[12] = 23300;
    GeneralUpgradeNeedKills[13] = 37700;
    GeneralUpgradeNeedKills[14] = 61000;
    GeneralUpgradeNeedKills[15] = 98700;
    GeneralUpgradeNeedKills[16] = 159700;
    GeneralUpgradeNeedKills[17] = 258400;
    GeneralUpgradeNeedKills[18] = 0;
  }

  function onInit() {
    InitWingIds();
    InitPlayerTitleStr();
    InitGeneralTitleStr();
    InitUnitUpgradeRatio();
  }
}