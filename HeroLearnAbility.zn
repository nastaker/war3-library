library HeroLearnAbility requires AbilityDict {
  //
  private {
    constant hashtable ht = InitHashtable();
    // 技能的最多可学习数量
    constant integer MAX_COUNT = 7;
    // 技能的最高等级
    constant integer MAX_LEVEL = 20;
    // 技能阶段最高等级
    constant integer MAX_PHASE_LEVEL = 4;
    // 技能最高阶段
    constant integer MAX_PHASE = 5;
    // 技能花费(木头)
    constant integer SPELL_COST = 10;
  }
  
  private struct HeroAbility {
    public {
      // 已学习的技能数量
      integer count = 0;
      // 已学习的技能
      integer spell[MAX_COUNT];
      // 已学习的技能等级
      integer spellLevel[MAX_COUNT];
    }

    static method GetPlayerHero() -> boolean {
      if (!IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO)) {
        return false;
      } else if (!IsUnitOwnedByPlayer(GetFilterUnit(), GetTriggerPlayer())) {
        return false;
      }
      return true;
    }
    
    static method learn(unit u, integer itemid) -> boolean {
      //获取英雄技能习得情况
      HeroAbility heroabi = HeroAbility(LoadInteger(ht, GetHandleId(u), 'sabi'));
      integer i = 0;
      integer abiId = 0;
      boolean isLearned = false;
      integer phase = 0;
      integer level = -1;
      //是否学习成果
      boolean learnSuccess = true;
      if(heroabi==null) {
        heroabi = HeroAbility.allocate();
        SaveInteger(ht, GetHandleId(u), 'sabi', heroabi);
      }
      //判断英雄已学技能中是否存在此技能
      //根据itemid判断是否已经学习此技能
      for(0 <= i < MAX_COUNT) {
        if(heroabi.spell[i]==itemid) {
          isLearned = true;
          break;
        }
      }
      
      if (isLearned == false) {
        //没有学习
        if (heroabi.count < MAX_COUNT) {
          // 已学习数量小于MAX_COUNT
          // 保存学习的技能物品id
          heroabi.spell[heroabi.count] = itemid;
          // 根据物品ID，习得对应技能
          abiId = LoadInteger(ht_item, itemid, 1);
          UnitAddAbility(u, abiId);
          UnitMakeAbilityPermanent(u, true, abiId);
          // 设置技能等级为1
          heroabi.spellLevel[heroabi.count] = 1;
          // 增加已学习技能数量
          heroabi.count = heroabi.count + 1;
        } else {
          //不可继续学习
          DisplayTextToPlayer(GetOwningPlayer(u), 0, 0, "学习失败，技能数量已达上限。");
          learnSuccess = false;
        }
      } else {
        // 已学习
        if (heroabi.spellLevel[i] < MAX_LEVEL) {
          // 还未达到最高级
          // 提高技能等级
          heroabi.spellLevel[i] = heroabi.spellLevel[i] + 1;
          // 阶段为 等级+(4-1)/4
          phase = (heroabi.spellLevel[i] + (MAX_PHASE_LEVEL-1)) / MAX_PHASE_LEVEL;
          // 根据物品ID，升级技能
          // 判断当前等级是否刚刚好到阶段开始等级 mod MAX_PHASE_LEVEL == 1
          level = ModuloInteger(heroabi.spellLevel[i], MAX_PHASE_LEVEL);
          if (level == 1) {
            // 删除原技能
            abiId = LoadInteger(ht_item, heroabi.spell[i], phase-1);
            UnitRemoveAbility(u, abiId);
            // 添加新技能
            abiId = LoadInteger(ht_item, heroabi.spell[i], phase);
            UnitAddAbility(u, abiId);
            UnitMakeAbilityPermanent(u, true, abiId); 
          } else {
            // 升级原技能
            abiId = LoadInteger(ht_item, heroabi.spell[i], phase);
            // 如果刚好等于4、8、16、20，则设置为4级
            if (level == 0) {
              SetUnitAbilityLevel(u, abiId, MAX_PHASE_LEVEL);
            } else {
              SetUnitAbilityLevel(u, abiId, level);
            }
          }
        } else {
          //不可继续学习
          DisplayTextToPlayer(GetOwningPlayer(u), 0, 0, "学习失败，技能已经满级。");
          learnSuccess = false;
        }
      }
      u = null;
      return learnSuccess;
    }

    static method launch() -> boolean {
      if (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO)) {
        // 判断物品是否有对应技能
        if (LoadInteger(ht_item, GetItemTypeId(GetManipulatedItem()), 1) == 0) {
        } else if(!HeroAbility.learn(GetTriggerUnit(), GetItemTypeId(GetManipulatedItem()))) {
          // 学习失败，返还木头
          SetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_LUMBER, SPELL_COST + GetPlayerState(GetOwningPlayer(GetTriggerUnit()), PLAYER_STATE_RESOURCE_LUMBER));
        }
      }
      return false;
    }

    static method onInit() {
        trigger trg = CreateTrigger();
        integer i = 0;
        for ( 0 <= i < 10 ) {
          TriggerRegisterPlayerUnitEvent(trg, Player(i), EVENT_PLAYER_UNIT_PICKUP_ITEM, null);
        }
        TriggerAddCondition(trg, Condition(function HeroAbility.launch));
        trg = null;
    }
  }

  public function GetUnitAbilityLevelByItemId(unit u, integer itemid) -> integer {
    //获取英雄技能习得情况
    HeroAbility heroabi = HeroAbility(LoadInteger(ht, GetHandleId(u), 'sabi'));
    integer i = 0;
    for (0<=i<heroabi.count) {
      if (heroabi.spell[i] == itemid) {
        break;
      }
    }
    return heroabi.spellLevel[i];
  }
}
