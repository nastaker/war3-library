library PlatformHelper requires GlobalVar, SystemBinary, YDWERPGScores {

  dialog dlgTitle;
  integer TITLE_COUNT = 10;
  button btnTitle[];
  integer IssuedSource[];

  function SetPlayerTitle(player p, integer titleIndex) {
    integer playerId = GetPlayerId(p);
    if (titleIndex <= 0) {
      return;
    }
    if (!havebinary(PlayerTitles[playerId], PlayerTitleCurr[playerId]-1)) {
      PlayerTitles[playerId] = PlayerTitles[playerId] + R2I(Pow(2, PlayerTitleCurr[playerId]-1));
      YDWERPGAddKey(p, "c+1023", R2I(Pow(2, PlayerTitleCurr[playerId]-1)));
    }
    PlayerTitleCurr[playerId] = titleIndex;
    YDWERPGSetKey(p, "ch", titleIndex);
    if (!havebinary(PlayerTitles[playerId], titleIndex-1)) {
      PlayerTitles[playerId] = PlayerTitles[playerId] + R2I(Pow(2, titleIndex-1));
      YDWERPGAddKey(p, "c+1023", R2I(Pow(2, titleIndex-1)));
    }
  }

  function DistributePlayerResourceAction() {
    // 发放积分资源，每轮最多发放4000*轮数资源
    integer playerId = GetPlayerId(GetEnumPlayer());
    integer source = ISSUE_SOURCE_AMOUNT * (1+udg_RoundIndex);
    integer sourceGold = 0;
    integer sourceLumber = 0;
    if (IssuedSource[playerId] == 0) {
      return;
    }
    // 检查IssuedSource资源是否足够，若足够IssuedSource减去source；若IssuedSource不足，则source改为IssuedSource，并将IssuedSource清零
    if (IssuedSource[playerId] > source) {
      IssuedSource[playerId] = IssuedSource[playerId] - source;
    } else {
      source = IssuedSource[playerId];
      IssuedSource[playerId] = 0;
    }
    // 按3：1比例发放
    sourceGold = R2I(source * 3 * 0.25);
    sourceLumber = R2I(source * 1 * 0.25);
    
    SetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD) + sourceGold);
    SetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_LUMBER) + sourceLumber);
    DisplayTextToPlayer(Player(playerId), 0, 0, "|cff66ccff获得资源："+I2S(sourceGold)+"金币，"+I2S(sourceLumber)+"木材。（由积分转化）|r");
  }

  public {
    boolean isPlayerChangedTitle[];
    integer PlayerWinStreak[];
    integer PlayerWinCount[];
    integer PlayerGameCount[];
    integer PlayerScoreBefore[];
    integer PlayerScore[];
    integer PlayerGeneralLevel[];
    integer PlayerUnitKills[];
    integer PlayerTitles[];
    integer PlayerTitleCurr[];
    integer PlayerConsumptionTotal[];

    integer addedScore[];

    function DialogTitleClick() {
      integer i;
      for (0 <= i < TITLE_COUNT) {
        if (GetClickedButton() == btnTitle[i]) {
          SetPlayerTitle(GetTriggerPlayer(), i+1);
          isPlayerChangedTitle[GetPlayerId(GetTriggerPlayer())] = true;
          DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "已更换称号为："+PlayerTitleStr[i+1]+"。");
          break;
        }
      }
    }

    function InitDialogs() {
      trigger trigDialog = CreateTrigger();
      dlgTitle = DialogCreate();
      // 难度选择对话框被点击事件;
      TriggerRegisterDialogEvent(trigDialog, dlgTitle);
      TriggerAddAction(trigDialog, function DialogTitleClick);
      trigDialog = null;
    }

    function ShowTitleChangeDialog(player p) {
      integer i;
      integer playerId = GetPlayerId(p);
      if (isPlayerChangedTitle[playerId]) {
        DisplayTextToPlayer(p, 0, 0, "你本局已更换过称号，无法再更换。");
        return;
      }
      DialogClear(dlgTitle);
      DialogSetMessage(dlgTitle, "请选择称号");
      for (0 <= i <= TITLE_COUNT) {
        if (havebinary(PlayerTitles[playerId], i) && i < TITLE_COUNT) {
          if (i == 8) {
            btnTitle[i] = DialogAddButton(dlgTitle, GeneralTitleStr[PlayerGeneralLevel[playerId]], 0);
          } else {
            btnTitle[i] = DialogAddButton(dlgTitle, PlayerTitleStr[i+1], 0);
          }
        } else if (i==TITLE_COUNT) {
          btnTitle[i] = DialogAddButton(dlgTitle, "取消", 0);
        }
      }
      DialogDisplay(p, dlgTitle, true);
      p = null;
    }

    function UnitAddWing(unit u) {
      integer playerId = GetPlayerId(GetOwningPlayer(u));
      if (!IsUnitType(u, UNIT_TYPE_HERO)) {
        u = null;
        return;
      }
      if (udg_PlayerTitleApply[playerId] == 5) {
        UnitAddAbility(u, WINGIDS[5]);
        UnitMakeAbilityPermanent(u, true, WINGIDS[5]);
      } else if (PlayerConsumptionTotal[playerId] >= CONSUMPTION_TO_GET_WING) {
        UnitAddAbility(u, WINGIDS[6]);
        UnitMakeAbilityPermanent(u, true, WINGIDS[6]);
      } else if (havebinary(PlayerTitles[playerId], 2)) {
        if (GetUnitRace(u) == RACE_HUMAN) {
          UnitAddAbility(u, WINGIDS[0]);
          UnitMakeAbilityPermanent(u, true, WINGIDS[0]);
        } else if (GetUnitRace(u) == RACE_ORC) {
          UnitAddAbility(u, WINGIDS[1]);
          UnitMakeAbilityPermanent(u, true, WINGIDS[1]);
        } else if (GetUnitRace(u) == RACE_UNDEAD) {
          UnitAddAbility(u, WINGIDS[2]);
          UnitMakeAbilityPermanent(u, true, WINGIDS[2]);
        } else if (GetUnitRace(u) == RACE_NIGHTELF) {
          UnitAddAbility(u, WINGIDS[3]);
          UnitMakeAbilityPermanent(u, true, WINGIDS[3]);
        } else {
          UnitAddAbility(u, WINGIDS[4]);
          UnitMakeAbilityPermanent(u, true, WINGIDS[4]);
        }
      }
      u = null;
    }

    function InitPlatQuest() {
      CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "一骑当千", "获得方法：击杀1000个以上敌人。\n效果：仅佩戴时，英雄升级时获得1点额外的全属性、攻击速度、防御力及每秒恢复的生命值。", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
      CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "建筑师", "获得方法：一局内建造完成超过500个建筑。\n效果：仅佩戴时，建造及建筑升级速度提升80%", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
      CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "将军", "获得方法：使用兵营内训练出来的单位杀敌数超过100个。\n效果：仅佩戴时，根据将军职位，每一级提升10%的单位升级效果。\n使用-cx查询升级需要的杀敌数。", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
      CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "迎难而上", "获得方法：通关困难难度。", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
      CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "天下无双", "获得方法：通关专家难度并且杀敌数超过1000。\n效果：英雄获得翅膀外观。", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
      CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "威震寰宇", "获得方法：通关史诗难度并且杀敌数超过1000。\n效果：仅佩戴时，英雄获得史诗级翅膀外观。（佩戴时覆盖专家称号翅膀外观）", "ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp");
    }

    function InitPlayerPlatScore() {
      integer i = 0;
      integer gold = 0;
      integer lumber = 0;
      string ver;
      for (0 <= i < 8) {
        if (GetPlayerController(Player(i))==MAP_CONTROL_USER && GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING) {
          udg_PlayerGeneralApply[i] = 1.0;
          udg_HeroDamageRatio[i] = UltimateDamageRatio;

          PlayerTitles[i] = YDWERPGGetKey(Player(i), "c+1023");
          PlayerTitleCurr[i] = YDWERPGGetKey(Player(i), "ch");
          PlayerScoreBefore[i] = YDWERPGGetKey(Player(i), "a+233");
          PlayerConsumptionTotal[i] = YDWERPGGetKey(Player(i), "xfze");
          // 玩家将军等级
          PlayerGeneralLevel[i] = YDWERPGGetKey(Player(i), "jj");
          // 玩家单位杀敌数
          PlayerUnitKills[i] = YDWERPGGetKey(Player(i), "dwsd");
          udg_UnitKills[i] = PlayerUnitKills[i];
          PlayerScore[i] = YDWERPGGetKey(Player(i), "jf");
          // 已发放资源，初始化为0
          IssuedSource[i] = PlayerScore[i];
          PlayerWinStreak[i] = YDWERPGGetKey(Player(i), "ws"+I2S(udg_CurrDiff+1));
          PlayerWinCount[i] = YDWERPGGetKey(Player(i), "wc"+I2S(udg_CurrDiff+1));
          udg_PlayerTitleApply[i] = PlayerTitleCurr[i];
          // 默认设置连胜数清零，结束后若胜利则+1
          YDWERPGSetKey(Player(i), "ws"+I2S(udg_CurrDiff+1), 0);
          // 若jf小于a+233，迁移数据
          if (PlayerScore[i] < PlayerScoreBefore[i]) {
            PlayerScore[i] = PlayerScoreBefore[i];
            YDWERPGSetKey(Player(i), "jf", PlayerScore[i]);
          }
          // 若玩家单位击杀等于0，则将积分*0.03后转为击杀数量
          if (udg_UnitKills[i] == 0) {
            udg_UnitKills[i] = R2I(PlayerScore[i] * 0.03);
          }
          gold = GetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD);
          lumber = GetPlayerState(Player(i), PLAYER_STATE_RESOURCE_LUMBER);
          //
          if (YDWERPGBillingHasStatus(Player(i), "20010779")) {
            gold = gold + 100000;
            DisplayTimedTextToPlayer(Player(i), 0, 0, 30.0, YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "|cffffcc00购买了金币，初始资源增加100000金币。|r");
          }
          if (YDWERPGBillingHasStatus(Player(i), "20010780")) {
            lumber = lumber + 100000;
            DisplayTimedTextToPlayer(Player(i), 0, 0, 30.0, YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "|cffffcc00购买了木材，初始资源增加100000木材。|r");
          }
          if (udg_PlayerTitleApply[i] == 2) {
            udg_HeroDamageRatio[i] = udg_HeroDamageRatio[i] + 0.5;
            DisplayTimedTextToPlayer(Player(i), 0, 0, 30.0, YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "当前称号"+PlayerTitleStr[udg_PlayerTitleApply[i]]+"：|cffffcc00英雄等级提升时获得1点额外的属性点、攻击速度、防御力、每秒生命恢复速度。且技能不受难度影响。|r");
          } else if (udg_PlayerTitleApply[i] == 7) {
            gold = gold + 1000;
            lumber = lumber + 1000;
            DisplayTimedTextToPlayer(Player(i), 0, 0, 30.0, YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "当前称号"+PlayerTitleStr[udg_PlayerTitleApply[i]]+"：|cffffcc00初始资源增加1000金币和1000木材。|r");
          } else if (udg_PlayerTitleApply[i] == 8) {
            udg_PlayerBuildSpeed[i] = 80;
            DisplayTimedTextToPlayer(Player(i), 0, 0, 30.0, YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "当前称号"+PlayerTitleStr[udg_PlayerTitleApply[i]]+"：|cffffcc00建造速度+80%。|r");
          } else if (udg_PlayerTitleApply[i] == 9) {
            udg_PlayerGeneralApply[i] = 1.0 + PlayerGeneralLevel[i] * GENERAL_INCREASE_RATIO;
            DisplayTimedTextToPlayer(Player(i), 0, 0, 30.0, YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "当前称号"+PlayerTitleStr[udg_PlayerTitleApply[i]]+"：|cffffcc00提升所带领部队士气。|r");
          }
          SetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD, gold);
          SetPlayerState(Player(i), PLAYER_STATE_RESOURCE_LUMBER, lumber);
        }
      }
    }

    function AddPlayerPlatScore(player p, integer score) {
      integer playerId = GetPlayerId(p);
      if (addedScore[playerId] + score > MaxJF) {
        addedScore[playerId] = MaxJF;
        score = MaxJF - addedScore[playerId];
      } else {
        addedScore[playerId] = addedScore[playerId] + score;
      }
      if (score <= 0) {
        return;
      }
      YDWERPGAddKey(p, "jf", score);
    }

    function AddPlayerUnitKills(player p) {
      // 默认不限制杀敌数
      integer playerId = GetPlayerId(p);
      integer maxKills = MAX_KILL_COUNT;
      // 判断当前难度，难度对应杀敌数积累上限
      if (udg_CurrDiff == 0) {
        // 普通杀敌上限3000；超过不计算杀敌
        maxKills = 3000;
      } else if (udg_CurrDiff == 1) {
        // 困难杀敌上限14400；超过不计算杀敌
        maxKills = 14400;
      }
      // 如果杀敌数超过累积上限，但是之前保存的没有超过，将之前保存的杀敌数修改为上限
      if (udg_UnitKills[playerId] > maxKills){
        if (PlayerUnitKills[playerId] > maxKills) {
          return;
        }
        PlayerUnitKills[playerId] = maxKills;
      } else {
        PlayerUnitKills[playerId] = udg_UnitKills[playerId];
      }
      YDWERPGSetKey(p, "dwsd", PlayerUnitKills[playerId]);
    }

    function GetPlayerTitle(integer playerId) -> string {
      if (PlayerTitleCurr[playerId] == 9) {
        return GeneralTitleStr[PlayerGeneralLevel[playerId]];
      }
      return PlayerTitleStr[PlayerTitleCurr[playerId]];
    }

    // 判断是否获得将军升级
    function GivePlayerGeneralTitle(player p){
      if (PlayerGeneralLevel[GetPlayerId(p)] < 17 && udg_UnitKills[GetPlayerId(p)] >= GeneralUpgradeNeedKills[PlayerGeneralLevel[GetPlayerId(p)] + 1]) {
        PlayerGeneralLevel[GetPlayerId(p)] = PlayerGeneralLevel[GetPlayerId(p)] + 1;
        YDWERPGSetKey(p, "jj", PlayerGeneralLevel[GetPlayerId(p)]);
        AddPlayerUnitKills(p);
        DisplayTimedTextToForce(udg_PlayerForce, 30.0, "玩家"+YDWEGetPlayerColorString(p, GetPlayerName(p))+"率部杀敌，授予官职"+GeneralTitleStr[PlayerGeneralLevel[GetPlayerId(p)]]+"！所率将士获得士气提升！" );
        if (havebinary(PlayerTitles[GetPlayerId(p)], 8)) {
          return;
        }
        SetPlayerTitle(p, 9);
      }
    }

    function GivePlayerThousandKillTitle(player p) {
      integer playerId = GetPlayerId(p);
      if (havebinary(PlayerTitles[playerId], 1)) {
        return;
      }
      DisplayTimedTextToForce(udg_PlayerForce, 30.0, "玩家"+YDWEGetPlayerColorString(p, GetPlayerName(p))+"奋勇杀敌，获得称号"+PlayerTitleStr[2]+"！\n称号效果：英雄升级时额外获得可分配属性点。\n下次进入游戏时生效。" );
      SetPlayerTitle(p, 2);
    }

    function GivePlayerProfesstionalTitle(player p) {
      integer playerId = GetPlayerId(p);
      if (havebinary(PlayerTitles[playerId], 2)) {
        return;
      }
      SetPlayerTitle(p, 3);
    }
    
    function GivePlayerHardTitle(player p) {
      integer playerId = GetPlayerId(p);
      if (havebinary(PlayerTitles[playerId], 3)) {
        return;
      }
      SetPlayerTitle(p, 4);
    }
    
    function GivePlayerEpicTitle(player p) {
      integer playerId = GetPlayerId(p);
      if (havebinary(PlayerTitles[playerId], 4)) {
        return;
      }
      SetPlayerTitle(p, 5);
    }

    function GivePlayerBuildMasterTitle(player p) {
      integer playerId = GetPlayerId(p);
      if (havebinary(PlayerTitles[playerId], 7)) {
        return;
      }
      DisplayTimedTextToForce(udg_PlayerForce, 30.0, "玩家"+YDWEGetPlayerColorString(p, GetPlayerName(p))+"建筑技巧娴熟，获得称号"+PlayerTitleStr[8]+"！\n称号效果：建筑建造、升级速度提升80%。\n下次进入游戏时生效。" );
      SetPlayerTitle(p, 8);
    }

    function PlatUpdateWinLose(integer winorlose) {
      integer i;
      string playernames = "";
      // winorlose 1 完胜 0 胜利 失败
      if (udg_CurrDiff <= 2 && winorlose == 1) {
        DisplayTimedTextToForce(udg_PlayerForce, 30.0, udg_DiffStr[udg_CurrDiff]+"难度通关，请继续挑战下一个难度。");
      }
      for (0 <= i < 8) {
        if (GetPlayerController(Player(i))==MAP_CONTROL_USER && GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING) {
          if (winorlose == 1) {
            // 完胜
            YDWERPGSetKey(Player(i), "ws"+I2S(udg_CurrDiff+1), PlayerWinStreak[i]+winorlose);
            YDWERPGSetKey(Player(i), "wc"+I2S(udg_CurrDiff+1), PlayerWinCount[i]+winorlose);
            AddPlayerPlatScore(Player(i), 50*(udg_CurrDiff+1));
            if (udg_CurrDiff == 1) {
              // 如果是困难难度
              playernames = playernames + YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "，";
              GivePlayerHardTitle(Player(i));
            } else if (udg_CurrDiff == 2 && udg_Kills[i] >= 1000) {
              // 如果是专家难度，杀敌大于1000
              playernames = playernames + YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "，";
              GivePlayerProfesstionalTitle(Player(i));
            } else if (udg_CurrDiff == 3 && udg_Kills[i] >= 1000) {
              // 如果是史诗难度，杀敌大于1000
              playernames = playernames + YDWEGetPlayerColorString(Player(i), GetPlayerName(Player(i))) + "，";
              GivePlayerEpicTitle(Player(i));
            }
          } else {
            // 其他情况连胜清空
            YDWERPGSetKey(Player(i), "ws"+I2S(udg_CurrDiff+1), 0);
          }
        }
      }
      if (udg_CurrDiff == 1 && winorlose == 1) {
        DisplayTimedTextToForce(udg_PlayerForce, 30.0, playernames + "挑战了自我，获得"+PlayerTitleStr[4]+"称号。");
      } else if (udg_CurrDiff == 2 && winorlose == 1) {
        DisplayTimedTextToForce(udg_PlayerForce, 30.0, "鉴于玩家" + playernames + "所作出的突出贡献，授予"+PlayerTitleStr[3]+"称号！");
      } else if (udg_CurrDiff == 3 && winorlose == 1) {
        DisplayTimedTextToForce(udg_PlayerForce, 30.0, playernames + "扫清六合，席卷八荒，" + PlayerTitleStr[5]+"！");
        DisplayTimedTextToForce(udg_PlayerForce, 30.0, "恭喜你们，超越了自我，创造了奇迹！"+udg_DiffStr[udg_CurrDiff]+"难度通关！");
      }
    }

    function DistributePlayerResource(){
      if (udg_IsOnPlat11) {
        ForForce(udg_PlayerForce, function DistributePlayerResourceAction);
      }
    }
  }

  function onInit() {
    InitDialogs();
  }
  
}