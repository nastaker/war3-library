
library SystemItemCombine requires TimerUtils {
  private {
    integer charges;
    // 合成出的目标物品
    item distItem = null;
    // 目标物品名称
    string distItemName = null;
    //
    integer MAT_COUNT_INDEX = 10000;
    
    // 合成物品数量，每种素材最多可合成 materialCombineCount 种
    integer distIndex = 0;
    integer materialCombineCount = 6;
    // 物品栏大小
    integer slotCount = 6;
    // 是否可以合成
    boolean canCombine = false;
    hashtable ht = InitHashtable();
  }

  function InitHashtableCombine() {
  }

  function InitHashtableMain() {
    timer t = GetExpiredTimer();
    InitHashtableCombine();
    ReleaseTimer(t);
    t = null;
  }
  
  function GetItemNameById(integer itemId) -> string {
    item tempItem = CreateItem(itemId, 0, 0);
    string itemName = GetItemName(tempItem);
    RemoveItem(tempItem);
    tempItem = null;
    return itemName;
  }

  function InnerItemCombine(unit u, integer itemId) -> boolean {
    integer slotIndex;
    integer matSlotIndex;
    integer materialIndex;
    integer materialRemove;
    integer materialRemoveCount;
    integer materialRemoveSlotIndex[];
    integer materialRemoveSlotCount[];
    // 是否拥有足够物品
    integer materialCount = 0;
    integer unitMaterialCount = 0;
    integer removeItemIndex = 0;
    // 目标物品ID
    integer distItemId = 0;
    integer distItemCount = 0;
    distIndex = 0;
    do {
      // 是否有可以合成的物品
      distItemId = LoadInteger(ht, itemId, distIndex);
      // 该物品无法合成任何物品，直接退出
      if (distItemId == 0) {
        canCombine = false;
        break;
      }
      // 合成物品需要什么素材（有多种合成公式，循环合成公式）
      for (1 <= distItemCount <= materialCombineCount) {
        matSlotIndex = 0;
        // 可以合成某物品
        canCombine = true;
        // 循环此公式需要的素材
        for (0 <= materialIndex < slotCount) {
          // 所需的素材物品id
          materialRemove = LoadInteger(ht, distItemId, (materialCombineCount * distItemCount) + materialIndex);
          if (materialRemove == 0) {
            if(materialIndex == 0) {
              canCombine = false;
            }
            break;
          }
          materialCount = 0;
          // 单位拥有的素材数量
          unitMaterialCount = 0;
          // 需要多少个
          materialRemoveCount = LoadInteger(ht, distItemId, MAT_COUNT_INDEX + (materialCombineCount * distItemCount) + materialIndex);
          // 循环单位物品栏
          for (0 <= slotIndex < slotCount) {
            // 是否有素材物品
            if (materialRemove == GetItemTypeId(UnitItemInSlot(u, slotIndex))) {
              // 素材物品数量是否足够
              materialRemoveSlotIndex[matSlotIndex] = slotIndex;
              materialCount = GetItemCharges(UnitItemInSlot(u, slotIndex));
              if (materialCount == 0) {
                materialCount = 1;
                materialRemoveSlotCount[matSlotIndex] = 1;
              } else {
                materialRemoveSlotCount[matSlotIndex] = materialRemoveCount;
              }
              unitMaterialCount = unitMaterialCount + materialCount;
              matSlotIndex += 1;
              if (unitMaterialCount >= materialRemoveCount) {
                break;
              }
            }
          }
          //循环结束，判断是否有对应素材及足够数量，缺一不可
          if (unitMaterialCount < materialRemoveCount) {
            canCombine = false;
            break;
          }
        }
        if(canCombine) {
          break;
        }
      }
      distIndex = distIndex + 1;
    } while(distIndex < materialCombineCount && !canCombine);
    if (canCombine) {
      // 可以合成
      // 先删除所有符合条件的物品
      for (0 <= removeItemIndex < matSlotIndex) {
        // 移除这个就行了
        slotIndex = materialRemoveSlotIndex[removeItemIndex];
        materialCount = GetItemCharges(UnitItemInSlot(u, slotIndex));
        if (materialCount == 0) {
          RemoveItem(UnitItemInSlot(u, slotIndex));
        } else {
          SetItemCharges(UnitItemInSlot(u, slotIndex), materialCount - materialRemoveSlotCount[removeItemIndex]);
        }
      }
      //创建一个目标物品给触发单位
      distItem = CreateItem(distItemId, GetUnitX(u), GetUnitY(u));
      distItemName = GetItemName(distItem);
      DisplayTextToForce(bj_FORCE_ALL_PLAYERS,("|cFFFF00CC"+GetPlayerName(GetOwningPlayer(u)))+("|r打造了物品|cFF9900FF"+distItemName)+"|r。");
      UnitAddItem(u, distItem);
      distItem = null;
      distItemName = null;
    }
    return canCombine;
  }

  // 尝试打造合成物品
  function ItemCraft() -> boolean {
    // 获取单位
    unit u = GetTriggerUnit();
    // 第一层循环，获取单位身上物品
    integer slotIndex;
    integer itemId = 0;
    for(0 <= slotIndex < slotCount) {
      itemId = GetItemTypeId(UnitItemInSlot(u, slotIndex));
      if (itemId == 0) {
        // 没有物品，跳过此次循环
      } else {
        // 传入单位，物品，物品索引
        if(InnerItemCombine(u, itemId)) {
          break;
        }
      }
    }
    //清空
    u = null;
    return false;
  }

  function IsUnitHero() -> boolean {
  }

  function onInit() {
    // 初始化变量
    integer i = 0;
    timer inithashtableTimer = NewTimer();
    trigger trg = CreateTrigger();
    // 初始化合成表
    TimerStart(inithashtableTimer, 1.00, false, function InitHashtableMain);
    inithashtableTimer = null;
    //
    trg = CreateTrigger();
    for (0 <= i < 12) {
      TriggerRegisterPlayerUnitEvent(trg, Player(i), EVENT_PLAYER_UNIT_PICKUP_ITEM, null);
    }
    TriggerAddCondition(trg, Condition(function ItemCraft));
    trg = null;
  }
}