library SystemWorkpoint requires SystemMultiboard {

  integer UnitUpgradeAbility[];
  public integer UnitUpgraded[8][6];
  integer UnitUpgradeUnitTypeId[5];
  integer UpgradeTypeCount = 5;
  string UpgradeAbilityStr[];
  integer lastUpgradePlayerId;
  trigger trgUpgradeUnit;
  integer i, UnitUpgradeLevel, UnitCurrUpgradeLevel, UnitUpgradeLevels;

  function UnitUpgradeByTypeId(unit u, integer typeId) {
    integer playerId = GetPlayerId(GetOwningPlayer(u));
    integer buffIndex = 1;
    UnitUpgradeLevels = GetUnitUserData(u);
    if (typeId == 4) {
      UnitAddAbility(u, UnitUpgradeAbility[typeId]);
      UnitMakeAbilityPermanent(u, true, UnitUpgradeAbility[typeId]);
      return;
    }
    for(0 <= i < 4) {
      if (typeId == i) {
        UnitUpgradeLevel = ModuloInteger(UnitUpgradeLevels / R2I(Pow(100, 3 - i)), 100);
        UnitCurrUpgradeLevel = UnitUpgraded[playerId][i];
        if (UnitCurrUpgradeLevel < UnitUpgradeLevel) {
          UnitCurrUpgradeLevel = UnitUpgradeLevel;
        }
        if (UnitCurrUpgradeLevel > 99) {
          UnitCurrUpgradeLevel = 99;
        }
        UnitCurrUpgradeLevel = UnitCurrUpgradeLevel - UnitUpgradeLevel;
        if (UnitCurrUpgradeLevel == 0) {
          return;
        }
        SetUnitUserData(u, UnitUpgradeLevels + UnitCurrUpgradeLevel * R2I(Pow(100, 3 - i)));
        break;
      }
    }
    if (IsUnitType(u, UNIT_TYPE_MELEE_ATTACKER)) {
      buffIndex = 0;
    }
    if (IsUnitType(u, UNIT_TYPE_SUMMONED) || GetUnitAbilityLevel(u, 'A02E') > 0) {
      buffIndex = buffIndex + 2;
    }
    if (typeId == 0) {
      // 选择单位增加攻击力
      // 攻击力放在最开始两位，如 攻99防88速77血66
      UnitAtkAdd(u, (ATK_UPGRADE_RATIO[buffIndex] * UnitCurrUpgradeLevel * GetUnitLevel(u)));
    } else if (typeId == 1) {
      // 选择单位增加防御力
      UnitArmorAdd(u, (DEF_UPGRADE_RATIO[buffIndex] * UnitCurrUpgradeLevel * GetUnitLevel(u)));
    } else if (typeId == 2) {
      // 选择单位增加攻击速度
      UnitAtkSpdAdd(u, (ATKSPD_UPGRADE_RATIO[buffIndex] * UnitCurrUpgradeLevel * GetUnitLevel(u)));
    } else if (typeId == 3) {
      // 选择单位增加生命值
      UnitMaxLifeAdd(u, (LIFE_UPGRADE_RATIO[buffIndex] * UnitCurrUpgradeLevel * GetUnitLevel(u)));
    }
  }

  function trgUpgradeUnitAction() {
    group g = null;
    unit u = null;
    g = CreateGroup();
    GroupEnumUnitsOfPlayer(g, Player(lastUpgradePlayerId), null);
    u = FirstOfGroup(g);
    while(u!=null) {
      if (GetUnitState(u, UNIT_STATE_LIFE) > 0 &&
      IsUnitType(u, UNIT_TYPE_STRUCTURE) == false && IsUnitType(u, UNIT_TYPE_ANCIENT) == false &&
      (IsUnitType(u, UNIT_TYPE_HERO) == false) && (IsUnitType(u, UNIT_TYPE_PEON) == false) &&
      (IsUnitType(u, UNIT_TYPE_MELEE_ATTACKER) || IsUnitType(u, UNIT_TYPE_RANGED_ATTACKER))) {
        UnitUpgradeByTypeId(u, udg_PlayerUnitUpgradeType[lastUpgradePlayerId]);
      }
      GroupRemoveUnit(g, u);
      u = FirstOfGroup(g);
    }
    GroupClear(g);
    DestroyGroup(g);
    g = null;
    u = null;
  }

  function InitUpgradeUnitStr() {
    integer i, j;
    UpgradeAbilityStr[0] = "基础攻击力";
    UpgradeAbilityStr[1] = "额外防御力";
    UpgradeAbilityStr[2] = "攻击速度";
    UpgradeAbilityStr[3] = "最大生命值";
    UpgradeAbilityStr[4] = "暴击：有20%概率造成2倍于普通攻击的伤害";
    UnitUpgradeAbility[4] = 'ACct';
    UnitUpgradeUnitTypeId[0] = 'n01B';
    UnitUpgradeUnitTypeId[1] = 'n01C';
    UnitUpgradeUnitTypeId[2] = 'n01D';
    UnitUpgradeUnitTypeId[3] = 'n00L';
    UnitUpgradeUnitTypeId[4] = 'n003';
    for (0 <= i < 8) {
      for (0 <= j < UpgradeTypeCount) {
        UnitUpgraded[i][j] = 0;
      }
    }
    trgUpgradeUnit = CreateTrigger();
    TriggerAddAction(trgUpgradeUnit, function trgUpgradeUnitAction);
  }

  function isWorkpointEnough(integer playerId, integer diffWorkpoint) -> boolean {
    if (udg_PlayerWorkPoint[playerId] < diffWorkpoint) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "工分不足，无法兑换。");
      return false;
    }
    return true;
  }

  public function ShowTips() {
    DisplayTextToForce(udg_PlayerForce, "在酒馆旁边的|cffffcc00修补匠|r处可以升级单位属性。不需要英雄亲自前往。单位也可以帮忙升级。");
  }

  public function ShowUnitUpgrade(integer playerId) {
    DisplayTextToPlayer(Player(playerId), 0, 0, 
"当前单位升级：\n攻击力：" + I2S(UnitUpgraded[playerId][0]) + "级。\n"+
"防御力：" + I2S(UnitUpgraded[playerId][1]) + "级。\n"+
"攻击速度：" + I2S(UnitUpgraded[playerId][2]) + "级。\n"+
"最大生命值：" + I2S(UnitUpgraded[playerId][3]) + "级。\n"+
"可分配属性（一骑当千称号所获得）：" + R2SW(udg_AssignableAttr[playerId],5,1));
  }

  public function UpgradeUnit(unit u) {
    integer i = 0;
    integer playerId = GetPlayerId(GetOwningPlayer(u));
    for (0 <= i < UpgradeTypeCount) {
      if (UnitUpgraded[playerId][i] > 0) {
        UnitUpgradeByTypeId(u, i);
      }
    }
    u = null;
  }

  public function GetHeroLevelUpAttr(integer beforeLevel, integer nowLevel) -> real {
    real beginVal = beforeLevel * 0.1;
    real targVal = (nowLevel-1) * 0.1;
    return (beginVal + targVal) * (nowLevel - beforeLevel) / 2;
  }

  function PurchaseMaxAvailableAttr(integer playerId, integer gold, integer attr) -> integer {
    integer haveGold = GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD);
    if (haveGold < gold * attr) {
      attr =  haveGold / gold;
      if (attr == 0) {
        DisplayTextToPlayer(Player(playerId), 0, 0, "金币不足。");
        return attr;
      }
    }
    SetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD, haveGold - gold*attr);
    return attr;
  }

  function PurchaseAttr(integer playerId, integer whichStat, integer attr) {
    // 属性价格
    integer gold = udg_CFG_ATTR_PRICE;
    integer haveGold = 0;
    if (attr <= 0) {
      return;
    }
    // 判断用户是否有 AssignableAttr，若有可分配属性值，优先使用免费属性分配。
    if (udg_AssignableAttr[playerId] >= 1.0) {
      if (attr > udg_AssignableAttr[playerId]) {
        attr = R2I(udg_AssignableAttr[playerId]);
      }
      udg_AssignableAttr[playerId] = udg_AssignableAttr[playerId] - attr;
      ModifyHeroStat(whichStat, udg_CurrSelectHero[playerId], bj_MODIFYMETHOD_ADD, attr);
      DisplayTextToPlayer(Player(playerId), 0, 0, "使用【"+PlayerTitleStr[2]+"】称号效果为|cff66ccff"+GetUnitName(udg_CurrSelectHero[playerId])+"|r分配|cff66ccff"+I2S(attr)+"|r点属性，剩余属性点：|cff66ccff"+R2SW(udg_AssignableAttr[playerId],5,1)+"|r。");
      return;
    }
    // 没有，判断金币是否足够
    attr = PurchaseMaxAvailableAttr(playerId, gold, attr);
    if (attr > 0) {
      ModifyHeroStat(whichStat, udg_CurrSelectHero[playerId], bj_MODIFYMETHOD_ADD, attr);
      DisplayTextToPlayer(Player(playerId), 0, 0, "已为|cff66ccff"+GetUnitName(udg_CurrSelectHero[playerId])+"|r购买|cff66ccff"+I2S(attr)+"|r点属性。");
    }
  }

  function PurchaseLevel(integer playerId, integer attr) {
    integer gold = LEVEL_PRICE;
    if (attr > 100 - GetHeroLevel(udg_CurrSelectHero[playerId])) {
      attr = 100 - GetHeroLevel(udg_CurrSelectHero[playerId]);
    }
    attr = PurchaseMaxAvailableAttr(playerId, gold, attr);
    if (attr > 0) {
      SetHeroLevel(udg_CurrSelectHero[playerId], (GetHeroLevel(udg_CurrSelectHero[playerId]) + attr), true);
      DisplayTextToPlayer(Player(playerId), 0, 0, "已为|cff66ccff"+GetUnitName(udg_CurrSelectHero[playerId])+"|r购买|cff66ccff"+I2S(attr)+"|r等级。");
    }
  }

  public function CodePurchase() {
    string cstr = GetEventPlayerChatStringMatched();
    integer attr = S2I(SubString(GetEventPlayerChatString(), 3, 7));
    integer playerId = GetPlayerId(GetTriggerPlayer());
    if (attr <= 0) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "输入【"+cstr+"100】，购买100点指定属性。(指令：-ll 力|-mj 敏|-zl 智|-dj 等级)");
      return;
    }
    if (udg_CurrSelectHero[playerId] == null) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "请先选择要购买属性的英雄。");
      return;
    }
    if (cstr == "-dj") {
      PurchaseLevel(playerId, attr);
    } else if (cstr == "-ll") {
      PurchaseAttr(playerId, bj_HEROSTAT_STR, attr);
    } else if (cstr == "-mj") {
      PurchaseAttr(playerId, bj_HEROSTAT_AGI, attr);
    } else if (cstr == "-zl") {
      PurchaseAttr(playerId, bj_HEROSTAT_INT, attr);
    }
  }

  function ExchangeResource(integer playerId, integer diffWorkpoint, playerstate state) {
    integer targ = 0;
    if (havebinary(udg_CFG_EXCHANGE_ENABLE, udg_CurrDiff) == false) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "该难度下禁止兑换工分。");
      return;
    }
    if (diffWorkpoint <= 0) {
      diffWorkpoint = 5;
    }
    if (udg_PlayerWorkPoint[playerId] < diffWorkpoint) {
      diffWorkpoint = udg_PlayerWorkPoint[playerId];
    }
    if (diffWorkpoint == 0) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "你没有工分了，无法兑换。");
      return;
    }
    udg_PlayerWorkPoint[playerId] = udg_PlayerWorkPoint[playerId] - diffWorkpoint;
    UpdateMultiboardPlayerId(playerId);
    // price workpoint
    targ = diffWorkpoint * udg_CFG_WORKPOINT_PRICE;
    SetPlayerState(Player(playerId), state, GetPlayerState(Player(playerId), state) + targ);
    DisplayTextToPlayer(Player(playerId), 0, 0, "您使用"+I2S(diffWorkpoint)+"工分兑换了"+I2S(targ)+"点资源。");
  }

  public function ExchangeGold(integer playerId, integer diffWorkpoint) {
    ExchangeResource(playerId, diffWorkpoint, PLAYER_STATE_RESOURCE_GOLD);
  }

  public function ExchangeLumber(integer playerId, integer diffWorkpoint) {
    ExchangeResource(playerId, diffWorkpoint, PLAYER_STATE_RESOURCE_LUMBER);
  }

  function UpgradeUnitTech(integer playerId, integer typeId) {
    boolean isUpgrade = false;
    integer diffWorkpoint;
    if (typeId >= 4) {
      diffWorkpoint = 100;
      if (UnitUpgraded[playerId][typeId] > 0) {
        DisplayTextToPlayer(Player(playerId), 0, 0, "["+UpgradeAbilityStr[typeId]+"]最高等级为1级，无法继续升级。");
        return;
      }
    } else {
      if (UnitUpgraded[playerId][typeId] >= 99) {
        DisplayTextToPlayer(Player(playerId), 0, 0, "["+UpgradeAbilityStr[typeId]+"]最高等级为99级，无法继续升级。");
        return;
      }
      diffWorkpoint = (UnitUpgraded[playerId][typeId] / GAP_PER_LEVEL + 1) * 5;
      // 每升GAP_PER_LEVEL级，就增加升级需要的费用
      diffWorkpoint = Min(diffWorkpoint, MAX_UPGRADE_WORKPOINT);
    }
    if (udg_PlayerWorkPoint[playerId] >= diffWorkpoint) {
      udg_PlayerWorkPoint[playerId] = udg_PlayerWorkPoint[playerId] - diffWorkpoint;
      UpdateMultiboardPlayerId(playerId);
      isUpgrade = true;
    } else if (typeId < 4 && GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD) >= diffWorkpoint * WORKPOINT_UPGRADE_PRICE) {
      SetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD) - diffWorkpoint * WORKPOINT_UPGRADE_PRICE);
      isUpgrade = true;
    }
    if (isUpgrade) {
      UnitUpgraded[playerId][typeId] = UnitUpgraded[playerId][typeId] + 1;
      UpdateMultiboardPlayerId(playerId);
      DisplayTextToPlayer(Player(playerId), 0, 0, "已升级单位技能：["+UpgradeAbilityStr[typeId]+"]。");
      if (typeId < 4) {
        udg_PlayerUnitUpgradeType[playerId] = typeId;
        lastUpgradePlayerId = playerId;
        TriggerExecute(trgUpgradeUnit);
      }
    } else {
      if (typeId < 4) {
        DisplayTextToPlayer(Player(playerId), 0, 0, "工分或金币不足，无法升级。");
      } else {
        DisplayTextToPlayer(Player(playerId), 0, 0, "工分不足，无法升级。");
      }
    }
  }

  public function SellUnit() {
    integer soldUnitId = GetUnitTypeId(GetSoldUnit());
    integer playerId = GetPlayerId(GetOwningPlayer(GetBuyingUnit()));
    integer i;
    // 删除购买的单位
    RemoveUnit(GetSoldUnit());
    // 兵种升级
    for (0 <= i <= 5) {
      if (soldUnitId == UnitUpgradeUnitTypeId[i]) {
        UpgradeUnitTech(playerId, i);
        return;
      }
    }
    if (soldUnitId == 'n00J') {
      // 更改称号
      ShowTitleChangeDialog(Player(playerId));
      return;
    } else if (soldUnitId == 'n00M') {
      // 兑换金币
      ExchangeGold(playerId, 5);
      return;
    } else if (soldUnitId == 'n00N') {
      // 兑换木材
      ExchangeLumber(playerId, 5);
      return;
    }
    // 下面的操作必须要有已选择的英雄，这里判断
    if (udg_CurrSelectHero[playerId] == null) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "请先选择要购买属性的英雄。");
      return;
    }
    if (soldUnitId == 'n00P') {
      // 购买力量
      PurchaseAttr(playerId, bj_HEROSTAT_STR, 10);
    } else if (soldUnitId == 'n00S') {
      // 购买敏捷
      PurchaseAttr(playerId, bj_HEROSTAT_AGI, 10);
    } else if (soldUnitId == 'n00U') {
      // 购买智力
      PurchaseAttr(playerId, bj_HEROSTAT_INT, 10);
    } else if (soldUnitId == 'n00W') {
      // 购买等级
      PurchaseLevel(playerId, 1);
    }
  }

  function ForPlayerCalculateWorkPoint() {
    integer playerId = GetPlayerId(GetEnumPlayer());
    integer allocatedWorkpoint = 0;
    allocatedWorkpoint = WORKPOINT_SUPPLY * (1+udg_RoundIndex);
    udg_PlayerWorkPoint[playerId] = udg_PlayerWorkPoint[playerId] + allocatedWorkpoint;
    DisplayTextToPlayer(GetEnumPlayer(), 0, 0, "|cff66ccff获得工分："+I2S(allocatedWorkpoint)+"，可用于购买单位属性升级，在修补匠处使用。|r");
  }

  public function UpdateWorkPoint() {
    ForForce(udg_PlayerForce, function ForPlayerCalculateWorkPoint);
  }

  function onInit() {
    InitUpgradeUnitStr();
  }
}