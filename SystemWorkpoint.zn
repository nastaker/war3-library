library SystemWorkpoint requires SystemMultiboard {

  integer UnitUpgradeAbility[];
  // integer UnitUpgradeAbilityFake[];
  public integer UnitUpgraded[8][6];
  integer UnitUpgradeUnitTypeId[5];
  integer UpgradeTypeCount = 5;
  integer workpointPrice = 1000;
  string UpgradeAbilityStr[];
  integer MAX_UPGRADE_GOLD = 20000;
  integer MAX_UPGRADE_WORKPOINT = 20;
  integer lastUpgradePlayerId;
  trigger trgUpgradeUnit;
  // 技能：1、吸血50%，2、击晕，3、魔免
  // 100工分一次。

  function UnitUpgradeByTypeId(unit u, integer typeId, integer extra) {
    integer atk = 5;
    integer def = 5;
    integer atkspd = 5;
    integer life = 50;
    if (IsUnitType(u, UNIT_TYPE_RANGED_ATTACKER)) {
      atk = 2;
      def = 2;
      atkspd = 2;
      life = 10;
    }
    if (IsUnitType(u, UNIT_TYPE_SUMMONED)) {
      atk = atk / 2;
      def = def / 2;
      atkspd = atkspd / 2;
      life = life / 2;
    }
    if (typeId == 0) {
      // 选择单位增加攻击力
      UnitAtkAdd(u, extra * atk * GetUnitLevel(u));
    } else if (typeId == 1) {
      // 选择单位增加防御力
      UnitArmorAdd(u, extra * def * GetUnitLevel(u));
    } else if (typeId == 2) {
      // 选择单位增加攻击速度
      UnitAtkSpdAdd(u, extra * atkspd * GetUnitLevel(u));
    } else if (typeId == 3) {
      // 选择单位增加生命值
      UnitMaxLifeAdd(u, extra * life * GetUnitLevel(u));
    } else if (typeId == 4) {
      UnitAddAbility(u, UnitUpgradeAbility[typeId]);
      UnitMakeAbilityPermanent(u, true, UnitUpgradeAbility[typeId]);
    }
  }

  function trgUpgradeUnitAction() {
    group g = null;
    unit u = null;
    g = CreateGroup();
    GroupEnumUnitsOfPlayer(g, Player(lastUpgradePlayerId), null);
    u = FirstOfGroup(g);
    while(u!=null) {
      if (GetUnitState(u, UNIT_STATE_LIFE) > 0 &&
      IsUnitType(u, UNIT_TYPE_STRUCTURE) == false && IsUnitType(u, UNIT_TYPE_ANCIENT) == false &&
      (IsUnitType(u, UNIT_TYPE_HERO) == false) && (IsUnitType(u, UNIT_TYPE_PEON) == false) &&
      (IsUnitType(u, UNIT_TYPE_MELEE_ATTACKER) || IsUnitType(u, UNIT_TYPE_RANGED_ATTACKER))) {
        UnitUpgradeByTypeId(u, udg_PlayerUnitUpgradeType[lastUpgradePlayerId], 1);
      }
      GroupRemoveUnit(g, u);
      u = FirstOfGroup(g);
    }
    GroupClear(g);
    DestroyGroup(g);
    g = null;
    u = null;
  }

  function InitUpgradeUnitStr() {
    integer i, j;
    UpgradeAbilityStr[0] = "基础攻击力";
    UpgradeAbilityStr[1] = "额外防御力";
    UpgradeAbilityStr[2] = "攻击速度";
    UpgradeAbilityStr[3] = "最大生命值";
    UpgradeAbilityStr[4] = "暴击：有20%概率造成2倍于普通攻击的伤害";
    UnitUpgradeAbility[4] = 'ACct';
    UnitUpgradeUnitTypeId[0] = 'n01B';
    UnitUpgradeUnitTypeId[1] = 'n01C';
    UnitUpgradeUnitTypeId[2] = 'n01D';
    UnitUpgradeUnitTypeId[3] = 'n00L';
    UnitUpgradeUnitTypeId[4] = 'n003';
    for (0 <= i < 8) {
      for (0 <= j < UpgradeTypeCount) {
        UnitUpgraded[i][j] = 0;
      }
    }
    trgUpgradeUnit = CreateTrigger();
    TriggerAddAction(trgUpgradeUnit, function trgUpgradeUnitAction);
  }

  function isWorkpointEnough(integer playerId, integer diffWorkpoint) -> boolean {
    if (udg_PlayerWorkPoint[playerId] < diffWorkpoint) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "工分不足，无法兑换。");
      return false;
    }
    return true;
  }

  public function ShowTips() {
    DisplayTextToForce(udg_PlayerForce, "在酒馆旁边的|cffffcc00修补匠|r处可以升级单位属性。不需要英雄亲自前往。单位也可以帮忙升级。");
  }

  public function ShowUnitUpgrade(integer playerId) {
    DisplayTextToPlayer(Player(playerId), 0, 0, 
"当前单位升级：\n攻击力：" + I2S(UnitUpgraded[playerId][0]) + "级，升级需要："+I2S(Min(MAX_UPGRADE_WORKPOINT,1+UnitUpgraded[playerId][0]))+ "工分或"+I2S(Min(workpointPrice*(1+UnitUpgraded[playerId][0]),MAX_UPGRADE_GOLD)) + "金币。\n"+
"防御力：" + I2S(UnitUpgraded[playerId][1]) + "级，升级需要："+I2S(Min(MAX_UPGRADE_WORKPOINT,1+UnitUpgraded[playerId][1]))+ "工分或"+I2S(Min(workpointPrice*(1+UnitUpgraded[playerId][1]),MAX_UPGRADE_GOLD)) + "金币。\n"+
"攻击速度：" + I2S(UnitUpgraded[playerId][2]) + "级，升级需要："+I2S(Min(MAX_UPGRADE_WORKPOINT,1+UnitUpgraded[playerId][2]))+ "工分或"+I2S(Min(workpointPrice*(1+UnitUpgraded[playerId][2]),MAX_UPGRADE_GOLD)) + "金币。\n"+
"最大生命值：" + I2S(UnitUpgraded[playerId][3]) + "级，升级需要："+I2S(Min(MAX_UPGRADE_WORKPOINT,1+UnitUpgraded[playerId][3]))+ "工分或"+I2S(Min(workpointPrice*(1+UnitUpgraded[playerId][3]),MAX_UPGRADE_GOLD)) + "金币。");
  }

  public function UpgradeSummonedUnit(unit u) {
    integer i = 0;
    integer playerId = GetPlayerId(GetOwningPlayer(u));
    for (0 <= i < UpgradeTypeCount) {
      if (UnitUpgraded[playerId][i] > 0) {
        UnitUpgradeByTypeId(u, i, UnitUpgraded[playerId][i]);
      }
    }
    u = null;
  }

  public function UpgradeUnit(unit u) {
    integer i = 0;
    integer playerId = GetPlayerId(GetOwningPlayer(u));
    for (0 <= i < UpgradeTypeCount) {
      if (UnitUpgraded[playerId][i] > 0) {
        UnitUpgradeByTypeId(u, i, UnitUpgraded[playerId][i]);
      }
    }
    u = null;
  }

  function ExchangeResource(integer playerId, integer diffWorkpoint, playerstate state) {
    integer targ = 0;
    if (havebinary(udg_CFG_EXCHANGE_ENABLE, udg_CurrDiff) == false) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "该难度下禁止兑换工分。");
      return;
    }
    if (diffWorkpoint == 0) {
      diffWorkpoint = 5;
    }
    if (udg_PlayerWorkPoint[playerId] < diffWorkpoint) {
      diffWorkpoint = udg_PlayerWorkPoint[playerId];
    }
    if (diffWorkpoint == 0) {
      DisplayTextToPlayer(Player(playerId), 0, 0, "你没有工分了，无法兑换。");
      return;
    }
    udg_PlayerWorkPoint[playerId] = udg_PlayerWorkPoint[playerId] - diffWorkpoint;
    UpdateMultiboardPlayerId(playerId);
    // price workpoint
    targ = diffWorkpoint * udg_CFG_WORKPOINT_PRICE;
    SetPlayerState(Player(playerId), state, GetPlayerState(Player(playerId), state) + targ);
    DisplayTextToPlayer(Player(playerId), 0, 0, "您使用"+I2S(diffWorkpoint)+"工分兑换了"+I2S(targ)+"点资源。");
  }

  public function ExchangeGold(integer playerId, integer diffWorkpoint) {
    ExchangeResource(playerId, diffWorkpoint, PLAYER_STATE_RESOURCE_GOLD);
  }

  public function ExchangeLumber(integer playerId, integer diffWorkpoint) {
    ExchangeResource(playerId, diffWorkpoint, PLAYER_STATE_RESOURCE_LUMBER);
  }

  function UpgradeUnitTech(integer playerId, integer typeId) {
    boolean isUpgrade = false;
    integer diffWorkpoint;
    if (typeId >= 4) {
      diffWorkpoint = 100;
      if (UnitUpgraded[playerId][typeId] > 0) {
        DisplayTextToPlayer(Player(playerId), 0, 0, "["+UpgradeAbilityStr[typeId]+"]最高等级为1级，无法继续升级。");
        return;
      }
    } else {
      diffWorkpoint = 1 + UnitUpgraded[playerId][typeId];
      diffWorkpoint = Min(diffWorkpoint, MAX_UPGRADE_WORKPOINT);
    }
    if (udg_PlayerWorkPoint[playerId] >= diffWorkpoint) {
      udg_PlayerWorkPoint[playerId] = udg_PlayerWorkPoint[playerId] - diffWorkpoint;
      UpdateMultiboardPlayerId(playerId);
      isUpgrade = true;
    } else if (typeId < 4 && GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD) >= diffWorkpoint * workpointPrice) {
      SetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(playerId), PLAYER_STATE_RESOURCE_GOLD) - diffWorkpoint * workpointPrice);
      isUpgrade = true;
    }
    if (isUpgrade) {
      UnitUpgraded[playerId][typeId] = UnitUpgraded[playerId][typeId] + 1;
      UpdateMultiboardPlayerId(playerId);
      DisplayTextToPlayer(Player(playerId), 0, 0, "已升级单位技能：["+UpgradeAbilityStr[typeId]+"]。");
      if (typeId < 4) {
        udg_PlayerUnitUpgradeType[playerId] = typeId;
        lastUpgradePlayerId = playerId;
        TriggerExecute(trgUpgradeUnit);
      }
    } else {
      if (typeId < 4) {
        DisplayTextToPlayer(Player(playerId), 0, 0, "工分或金币不足，无法升级。");
      } else {
        DisplayTextToPlayer(Player(playerId), 0, 0, "工分不足，无法升级。");
      }
    }
  }

  public function SellUnit() {
    unit hero = GetBuyingUnit();
    integer soldUnitId = GetUnitTypeId(GetSoldUnit());
    integer playerId = GetPlayerId(GetOwningPlayer(hero));
    integer i;
    // 删除购买的单位
    RemoveUnit(GetSoldUnit());
    // 兵种升级
    for (0 <= i <= 5) {
      if (soldUnitId == UnitUpgradeUnitTypeId[i]) {
        UpgradeUnitTech(playerId, i);
        return;
      }
    }
    if (soldUnitId == 'n00J') {
      // 更改称号
      ShowTitleChangeDialog(Player(playerId));
    } else if (soldUnitId == 'n00M') {
      // 兑换金币
      ExchangeGold(playerId, 5);
    } else if (soldUnitId == 'n00N') {
      // 兑换木材
      ExchangeLumber(playerId, 5);
    }
    hero = null;
  }

  function ForPlayerCalculateWorkPoint() {
    integer playerId = GetPlayerId(GetEnumPlayer());
    integer allocatedWorkpoint = 0;
    allocatedWorkpoint = 5 * (1+udg_RoundIndex);
    udg_PlayerWorkPoint[playerId] = udg_PlayerWorkPoint[playerId] + allocatedWorkpoint;
    DisplayTextToPlayer(GetEnumPlayer(), 0, 0, "|cff66ccff获得工分："+I2S(allocatedWorkpoint)+"，可用于购买单位属性升级，在修补匠处使用。|r");
  }

  public function UpdateWorkPoint() {
    ForForce(udg_PlayerForce, function ForPlayerCalculateWorkPoint);
  }

  function onInit() {
    InitUpgradeUnitStr();
  }
}