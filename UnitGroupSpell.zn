library UnitGroupSpell {

  boolexpr SpellTargetCondition;
  integer MAJA_ID = 'n00I';

  function InitGroupSpells() {
    // 可以进行群体释放的法术列表
    SaveBoolean(ht, 'AEsh', 'gspl', true);
    SaveBoolean(ht, 'AHtb', 'gspl', true);
    SaveBoolean(ht, 'AHhb', 'gspl', true);
    SaveBoolean(ht, 'AHbn', 'gspl', true);
    SaveBoolean(ht, 'AOhx', 'gspl', true);
    SaveBoolean(ht, 'AOcl', 'gspl', true);
    SaveBoolean(ht, 'AOhw', 'gspl', true);
    SaveBoolean(ht, 'AUdc', 'gspl', true);
    SaveBoolean(ht, 'AUfn', 'gspl', true);
    SaveBoolean(ht, 'AEer', 'gspl', true);
    SaveBoolean(ht, 'ANso', 'gspl', true);
    SaveBoolean(ht, 'ANdo', 'gspl', true);
    SaveBoolean(ht, 'A01D', 'gspl', true);
    SaveReal(ht, 'A01D', 'rang', 600.);
    // 技能是否持续施法技能
    // 群体释放时，马甲释放的技能
    SaveInteger(ht, 'A01D', 'fabi', 'A01E');
    // 技能群体释放，最大目标数量
    SaveInteger(ht, 'AOhw', 'mult', 2);
    SaveInteger(ht, 'AOcl', 'mult', 2);
    SaveInteger(ht, 'ANch', 'mult', 2);
    SaveInteger(ht, 'ANdo', 'mult', 2);
    SaveInteger(ht, 'A01D', 'mult', 999);
    // 技能群体释放，需要满足条件
    SaveBooleanExprHandle(ht, 'A01D', 'cond', Condition(function BoolepxrAllMoveEnemy));
    SaveBooleanExprHandle(ht, 'AHbn', 'cond', Condition(function BoolepxrAllyOrEnemy));
    SaveBooleanExprHandle(ht, 'AHhb', 'cond', Condition(function BoolepxrAliveAllyOrUndeadEnemy));
    SaveBooleanExprHandle(ht, 'AUdc', 'cond', Condition(function BoolepxrUndeadAllyOrAliveEnemy));

  }

  function UnitGroupSpellAction() -> boolean {
    boolean isValid = true;
    boolean isNeedEnd = false;
    integer abilityId = GetSpellAbilityId();
    integer fakeAbilityId = 0;
    integer mult = 0;
    real x = 0;
    real y = 0;
    real range = 0;
    group g = null;
    unit maja = null;
    unit u = null;
    unit hero = GetTriggerUnit();

    if (!LoadBoolean(ht, abilityId, 'gspl')) {
      isValid = false;
    } else if (!IsUnitType(hero, UNIT_TYPE_HERO) && GetUnitAbilityLevel(hero, 'ACrk') == 0 && GetUnitAbilityLevel(hero, 'ACsk') == 0) {
      isValid = false;
    } else if (GetUnitTypeId(hero) == MAJA_ID) {
      isValid = false;
    }

    if (!isValid) {
      hero = null;
      return false;
    }

    fakeAbilityId = LoadInteger(ht, abilityId, 'fabi');
    if (fakeAbilityId == 0) {
      fakeAbilityId = abilityId;
    }
    mult = LoadInteger(ht, abilityId, 'mult');
    if (mult == 0) {
      // 若没有规定，默认为6
      mult = 6;
    }
    SpellTargetCondition = LoadBooleanExprHandle(ht, abilityId, 'cond');
    if (SpellTargetCondition == null) {
      // 没有规定目标类型，默认为非目标的敌人单位
      SpellTargetCondition = Condition(function BoolepxrEnemyUnitNoTarget);
    }
    isNeedEnd = LoadBoolean(ht, abilityId, 'splC');
    x = GetSpellTargetX();
    y = GetSpellTargetY();
    g = CreateGroup();
    range = LoadReal(ht, abilityId, 'rang');
    if (range == 0) {
      range = 300;
    }
    GroupEnumUnitsInRange(g, x, y, range, SpellTargetCondition);
    do {
      u = FirstOfGroup(g);
      GroupRemoveUnit(g, u);
      maja = CreateUnit(GetOwningPlayer(hero), MAJA_ID, GetUnitX(hero), GetUnitY(hero), GetUnitFacing(hero));
      UnitAddAbility(maja, fakeAbilityId);
      SetUnitAbilityLevel(maja, fakeAbilityId, GetUnitAbilityLevel(hero,abilityId));
      IssueTargetOrderById(maja, GetUnitCurrentOrder(hero), u);
      if (!isNeedEnd) {
        UnitApplyTimedLife( maja, 'BHwe', 5.00 );
      }
      mult = mult - 1;
    } while (mult > 0 && FirstOfGroup(g) != null);
    DestroyGroup(g);
    u = null;
    maja = null;
    hero = null;
    g = null;
    SpellTargetCondition = null;

    return false;
  }

  function BoolexprPlayerMaja() -> boolean {
    if (GetUnitTypeId(GetFilterUnit()) == MAJA_ID) {
      return true;
    }
    return false;
  }

  function UnitGroupSpellEndCast() -> boolean {
    integer abilityId = GetSpellAbilityId();
    unit u = null;
    group g = null;
    boolean isNeedEnd = LoadBoolean(ht, abilityId, 'splC');
    if (isNeedEnd) {
      g = CreateGroup();
      GroupEnumUnitsOfPlayer(g, GetOwningPlayer(GetTriggerUnit()), Condition(function BoolexprPlayerMaja));
      do {
        u = FirstOfGroup(g);
        RemoveUnit(u);
        GroupRemoveUnit(g, u);
      } while (u != null);
      DestroyGroup(g);
      g = null;
      u = null;
    }
    return false;
  }


  function onInit() {
    integer i = 0;
    trigger trg = CreateTrigger();
    trigger trgSpellEnd = CreateTrigger();

    InitGroupSpells();
    for (0 <= i < 12) {
      TriggerRegisterPlayerUnitEvent(trg, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, null);
      TriggerRegisterPlayerUnitEvent(trgSpellEnd, Player(i), EVENT_PLAYER_UNIT_SPELL_ENDCAST, null);
    }
    TriggerAddCondition(trg, Condition(function UnitGroupSpellAction));
    TriggerAddCondition(trgSpellEnd, Condition(function UnitGroupSpellEndCast));
    trg = null;
    trgSpellEnd = null;
  }
}